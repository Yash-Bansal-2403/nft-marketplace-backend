{
  "address": "0x7Ae655367a24cd42E6904046d7504db5285417FE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "AlreadyListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IsNotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoProceeds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotApprovedForMarketplace",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NotListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriceMustBeAboveZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "PriceNotMet",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "ItemBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ItemCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "ItemListed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "buyItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "cancelListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getListing",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            }
          ],
          "internalType": "struct NftMarketplace.Listing",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "getProceeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "listItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "updateListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawProceeds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbc59d2277b7c35bbac84ed7918f1ba81036b9e3f164aa6596b333db2f5324ef8",
  "receipt": {
    "to": null,
    "from": "0xCC9206584322A0ad11918e14d0f860365a85914d",
    "contractAddress": "0x7Ae655367a24cd42E6904046d7504db5285417FE",
    "transactionIndex": 4,
    "gasUsed": "1029523",
    "logsBloom": "0x
    "blockHash": "0x7b4b8d433ce1047f9bfbf5d1f755b7eae7f45989dd22144037d564781146170b",
    "transactionHash": "0xbc59d2277b7c35bbac84ed7918f1ba81036b9e3f164aa6596b333db2f5324ef8",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 34614929,
        "transactionHash": "0xbc59d2277b7c35bbac84ed7918f1ba81036b9e3f164aa6596b333db2f5324ef8",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000cc9206584322a0ad11918e14d0f860365a85914d",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000057c84c1f9a09d0000000000000000000000000000000000000000000000008f2001bdac38eec2000000000000000000000000000000000000000000001e09b2b15cfc8b83204d0000000000000000000000000000000000000000000000008f1a8538ea3f4e25000000000000000000000000000000000000000000001e09b2b6d9814d7cc0ea",
        "logIndex": 9,
        "blockHash": "0x7b4b8d433ce1047f9bfbf5d1f755b7eae7f45989dd22144037d564781146170b"
      }
    ],
    "blockNumber": 34614929,
    "cumulativeGasUsed": "2590133",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "11f7c2a913f6aaa4a8fede310fbc4dc5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AlreadyListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IsNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoProceeds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotApprovedForMarketplace\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NotListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceMustBeAboveZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceNotMet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ItemBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ItemCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ItemListed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getListing\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"internalType\":\"struct NftMarketplace.Listing\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"getProceeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"listItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"updateListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawProceeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NftMarketplace.sol\":\"NftMarketplace\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/NftMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\"; //to use \\n//1-getApproved function -> returns the address of the approved contracts who can buy/sell the NFT -> helps to check if marketplace is the approved seller of NFT\\n//2-ownerOf function -> to check if the address trying to list NFT is the actual owner of the NFT\\n//3-safeTransferFrom -> to transfer NFT from seller to buyer\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";//to use nonReentrant in buyItem function\\n\\n//Functions performed by mrketplace-\\n//1. List an NFT\\n//2. Buy NFT->buying an NFT will automatically remove the NFT from active listings in marketplace and transfer the money(proceeds) to the seller account\\n//3. Update NFT listing-> update the price of NFT lisitng\\n//4. Cancel listing-> cancel the NFT from active listings\\n//5. WithdrawProceeds: the payment of the sold NFT is withdtrawn by the user through this\\n\\n//-------------------------------Errors-----------------------------------------\\n\\nerror PriceNotMet(address nftAddress, uint256 tokenId, uint256 price);\\nerror ItemNotForSale(address nftAddress, uint256 tokenId);\\nerror NotListed(address nftAddress, uint256 tokenId);\\nerror AlreadyListed(address nftAddress, uint256 tokenId);\\nerror NoProceeds();\\nerror NotOwner();\\nerror NotApprovedForMarketplace();\\nerror PriceMustBeAboveZero();\\nerror IsNotOwner();\\n\\n//-------------------------------Errors end-----------------------------------------\\n\\n//inheriting ReentrancyGuard to prevent reentrancy attack ny adding nonRentrant modifier to the functions which are prone to attack(buyItem function)\\ncontract NftMarketplace is ReentrancyGuard {\\n    //Data type for holding the data of listed NFT\\n    struct Listing {\\n        uint256 price;\\n        address seller;\\n    }\\n    //-------------------------Events----------------------------------------------\\n\\n    event ItemListed(\\n        address indexed seller,\\n        address indexed nftAddress,\\n        uint256 indexed tokenId,\\n        uint256 price\\n    );\\n\\n    event ItemCanceled(address indexed seller, address indexed nftAddress, uint256 indexed tokenId);\\n\\n    event ItemBought(\\n        address indexed buyer,\\n        address indexed nftAddress,\\n        uint256 indexed tokenId,\\n        uint256 price\\n    );\\n    //-----------------------Events Closed-----------------------------------------------\\n    \\n    //-----------------------Mappings----------------------------------------------------\\n\\n    mapping(address => mapping(uint256 => Listing)) private s_listings; //holding the NFTs in a mapping ( NFTAddress->NFTtokenId->NFT)\\n    mapping(address => uint256) private s_proceeds;//holding the proceeds(money after selling the NFT) of different users in a mapping( user's address -> proceed(money as uint256))    \\n    //----------------------Mappings closed----------------------------------------\\n   \\n    //----------------------Modifiers----------------------------------------------\\n\\n    //@ modofier to make sure not to list already listed NFT\\n    modifier notListed(address nftAddress, uint256 tokenId) {\\n        Listing memory listing = s_listings[nftAddress][tokenId];\\n        //if the price is greater than 0 it means that NFT is already listed on marketplace\\n        if (listing.price > 0) {\\n            revert AlreadyListed(nftAddress, tokenId);\\n        }\\n        _;\\n    } \\n\\n    //@ modifier to make sure NFT is listed before someone try to buy NFT\\n    modifier isListed(address nftAddress, uint256 tokenId) {\\n        Listing memory listing = s_listings[nftAddress][tokenId];\\n        if (listing.price <= 0) {\\n            revert NotListed(nftAddress, tokenId);\\n        }\\n        _;\\n    }\\n\\n    //@ modifier to make sure that the person listing the NFT is the actual owner of that NFT\\n    modifier isOwner(\\n        address nftAddress,\\n        uint256 tokenId,\\n        address spender//address trying to list NFT\\n    ) {\\n        IERC721 nft = IERC721(nftAddress);\\n        address owner = nft.ownerOf(tokenId);\\n        if (spender != owner) {\\n            revert NotOwner();\\n        }\\n        _;\\n    }\\n\\n    // IsNotOwner Modifier - Nft Owner can't buy his/her NFT\\n    // Modifies buyItem function\\n    // Owner should only list, cancel listing or update listing\\n     modifier isNotOwner(\\n        address nftAddress,\\n        uint256 tokenId,\\n        address spender\\n    ) {\\n        IERC721 nft = IERC721(nftAddress);\\n        address owner = nft.ownerOf(tokenId);\\n        if (spender == owner) {\\n            revert IsNotOwner();\\n        }\\n        _;\\n    } \\n\\n    //----------------------------------Modifiers close-------------------------------------\\n\\n    // --------------------------Main Functions -------------------------------//\\n\\n    /*\\n     * @notice Method for listing NFT\\n     * @param nftAddress Address of NFT contract\\n     * @param tokenId Token ID of NFT\\n     * @param price sale price for each item\\n     * @modifier notListed for preventing listing of already listed NFTs\\n     * @modifier isOwner to make sure that the person listing the NFT is the actual owner of that NFT\\n     */\\n    function listItem(\\n        address nftAddress,\\n        uint256 tokenId,\\n        uint256 price\\n    ) external notListed(nftAddress, tokenId) isOwner(nftAddress, tokenId, msg.sender) {\\n        if (price <= 0) {\\n            revert PriceMustBeAboveZero(); //revert if lisiting price is <= 0\\n        }\\n        //now we provide approval to the marketplace to sell the NFT on behalf of the seller of NFT\\n        IERC721 nft = IERC721(nftAddress); //we use ERC721 interface to use getApproved functionality\\n        if (nft.getApproved(tokenId) != address(this)) {\\n            // getApproved function is provided by the ERC721 from openZeppelin\\n            //nft.getApproved(tokenId) returns the address of the approved contracts who can buy/sell the NFT\\n            revert NotApprovedForMarketplace();\\n        }\\n        s_listings[nftAddress][tokenId] = Listing(price, msg.sender); //listing NFT in the marketplace\\n        emit ItemListed(msg.sender, nftAddress, tokenId, price); //whenever we update mapping we emit event\\n    }\\n\\n    /*\\n     * @notice Method for cancelling listing\\n     * @param nftAddress Address of NFT contract\\n     * @param tokenId Token ID of NFT\\n     * @modifier isOwner to check only the owner can cancel Listing\\n     * @modifier isListed to check first whether the NFT is listed or not before cancelling the listing\\n     */\\n    function cancelListing(\\n        address nftAddress,\\n        uint256 tokenId\\n    ) external isOwner(nftAddress, tokenId, msg.sender) isListed(nftAddress, tokenId) {\\n        delete (s_listings[nftAddress][tokenId]);\\n        emit ItemCanceled(msg.sender, nftAddress, tokenId);\\n    }\\n\\n    /*\\n     * @notice Method for buying listing\\n     * @notice The owner of an NFT could unapprove the marketplace,\\n     * which would cause this function to fail\\n     * @param nftAddress Address of NFT contract\\n     * @param tokenId Token ID of NFT\\n     * @ modifier isListed to make sure NFT is listed before someone try to buy NFT\\n     * @ modifier isNotOwner to check if buyer is not already an owner\\n     */\\n    function buyItem(\\n        address nftAddress,\\n        uint256 tokenId\\n    )\\n        external\\n        payable\\n        isListed(nftAddress, tokenId)\\n        isNotOwner(nftAddress, tokenId, msg.sender)\\n        nonReentrant\\n    {\\n\\n        Listing memory listedItem = s_listings[nftAddress][tokenId];//extract the NFT from mapping to be bought\\n\\n        //to check if the money sent is sufficient to buy an NFT\\n        if (msg.value < listedItem.price) {\\n            revert PriceNotMet(nftAddress, tokenId, listedItem.price);\\n        }\\n        s_proceeds[listedItem.seller] += msg.value;//updating the money which user hold\\n        delete (s_listings[nftAddress][tokenId]);//deleting the active listing after the NFT is bought\\n\\n        //we use \\\"PULL OVER PUSH\\\" functionality i.e transferrring the risk of money transaction to the end user,\\n        //instead of sending money to the user, we make to have user withdraw the money\\n        IERC721(nftAddress).safeTransferFrom(listedItem.seller, msg.sender, tokenId);//transfering the NFT at the last step to prevent reentrancy attack\\n        emit ItemBought(msg.sender, nftAddress, tokenId, listedItem.price);\\n    }\\n\\n    /*\\n     * @notice Method for updating listing\\n     * @param nftAddress Address of NFT contract\\n     * @param tokenId Token ID of NFT\\n     * @param newPrice Price in Wei of the item\\n     * @ modifier isListed to make sure NFT is listed before someone try to update NFT listing\\n     * @ modifier isOwner to check if only owner can update the listing\\n     */\\n    function updateListing(\\n        address nftAddress,\\n        uint256 tokenId,\\n        uint256 newPrice\\n    ) external isListed(nftAddress, tokenId) nonReentrant isOwner(nftAddress, tokenId, msg.sender) {\\n        //We should check the value of `newPrice` and revert if it's below zero (like we also check in `listItem()`)\\n        if (newPrice <= 0) {\\n            revert PriceMustBeAboveZero();\\n        }\\n        s_listings[nftAddress][tokenId].price = newPrice;\\n        emit ItemListed(msg.sender, nftAddress, tokenId, newPrice);\\n    }\\n\\n    /*\\n     * @notice Method for withdrawing proceeds from sales\\n     */\\n    function withdrawProceeds() external {\\n        uint256 proceeds = s_proceeds[msg.sender];\\n        if (proceeds <= 0) {\\n            revert NoProceeds();\\n        }\\n        s_proceeds[msg.sender] = 0;\\n        (bool success, ) = payable(msg.sender).call{value: proceeds}(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n    }\\n\\n    \\n    // ------------------------------Getter Functions------------------------------------------------- //\\n    \\n\\n    function getListing(\\n        address nftAddress,\\n        uint256 tokenId\\n    ) external view returns (Listing memory) {\\n        return s_listings[nftAddress][tokenId];\\n    }\\n\\n    function getProceeds(address seller) external view returns (uint256) {\\n        return s_proceeds[seller];\\n    }\\n}\\n\",\"keccak256\":\"0xe8352f64f52c4e5676823a0e49491b83aee7fafbe1906a5e9f7d00467fe91987\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506001600055611166806100256000396000f3fe6080604052600436106100705760003560e01c80639038e6931161004e5780639038e6931461013e5780639f37092a14610153578063b2ddee0614610166578063f772adf11461018657600080fd5b806330cfeda91461007557806388700d1c146100cb57806389bfd38f1461011c575b600080fd5b34801561008157600080fd5b506100b8610090366004611054565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205490565b6040519081526020015b60405180910390f35b3480156100d757600080fd5b506100eb6100e6366004611078565b6101a6565b604080518251815260209283015173ffffffffffffffffffffffffffffffffffffffff1692810192909252016100c2565b34801561012857600080fd5b5061013c6101373660046110a4565b610203565b005b34801561014a57600080fd5b5061013c61060f565b61013c610161366004611078565b61071b565b34801561017257600080fd5b5061013c610181366004611078565b610b19565b34801561019257600080fd5b5061013c6101a13660046110a4565b610d53565b6040805180820182526000808252602091820181905273ffffffffffffffffffffffffffffffffffffffff858116825260018084528483208684528452918490208451808601909552805485529091015416908201525b92915050565b73ffffffffffffffffffffffffffffffffffffffff808416600090815260016020818152604080842087855282529283902083518085019094528054808552920154909316928201929092528491849190156102af576040517f4a5568d500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602481018390526044015b60405180910390fd5b6040517f6352211e00000000000000000000000000000000000000000000000000000000815260048101869052869086903390839060009073ffffffffffffffffffffffffffffffffffffffff831690636352211e90602401602060405180830381865afa158015610325573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034991906110d9565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146103b0576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600089116103ea576040517fe1abbfc500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f081812fc000000000000000000000000000000000000000000000000000000008152600481018b90528b90309073ffffffffffffffffffffffffffffffffffffffff83169063081812fc90602401602060405180830381865afa158015610459573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047d91906110d9565b73ffffffffffffffffffffffffffffffffffffffff16146104ca576040517f4be3a2c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180604001604052808b81526020013373ffffffffffffffffffffffffffffffffffffffff16815250600160008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d81526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050508a8c73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd547e933094f12a9159076970143ebe73234e64480317844b0dcb36117116de48d6040516105f991815260200190565b60405180910390a4505050505050505050505050565b3360009081526002602052604090205480610656576040517fc4d8fa8700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000818152600260205260408082208290555190919083908381818185875af1925050503d80600081146106a7576040519150601f19603f3d011682016040523d82523d6000602084013e6106ac565b606091505b5050905080610717576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c6564000000000000000000000000000000000060448201526064016102a6565b5050565b73ffffffffffffffffffffffffffffffffffffffff8083166000908152600160208181526040808420868552825292839020835180850190945280548085529201549093169282019290925283918391906107c1576040517f6831488c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602481018390526044016102a6565b6040517f6352211e00000000000000000000000000000000000000000000000000000000815260048101859052859085903390839060009073ffffffffffffffffffffffffffffffffffffffff831690636352211e90602401602060405180830381865afa158015610837573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085b91906110d9565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036108c2576040517f65b023fd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108ca610fbc565b73ffffffffffffffffffffffffffffffffffffffff808b1660009081526001602081815260408084208e85528252928390208351808501909452805480855292015490931692820192909252903410156109795780516040517f7c93456500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d166004820152602481018c905260448101919091526064016102a6565b60208082015173ffffffffffffffffffffffffffffffffffffffff16600090815260029091526040812080543492906109b39084906110f6565b909155505073ffffffffffffffffffffffffffffffffffffffff8b1660008181526001602081815260408084208f855282528084209384559290910180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905583015190517f42842e0e0000000000000000000000000000000000000000000000000000000081526342842e0e91610a7f9133908f9060040173ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b600060405180830381600087803b158015610a9957600080fd5b505af1158015610aad573d6000803e3d6000fd5b505082516040519081528c925073ffffffffffffffffffffffffffffffffffffffff8e16915033907f263223b1dd81e51054a4e6f791d45a4a1ddb4aadcd93a2dfd892615c3fdac1879060200160405180910390a450610b0d6001600055565b50505050505050505050565b6040517f6352211e00000000000000000000000000000000000000000000000000000000815260048101829052829082903390839060009073ffffffffffffffffffffffffffffffffffffffff831690636352211e90602401602060405180830381865afa158015610b8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb391906110d9565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610c1a576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff80881660009081526001602081815260408084208b855282529283902083518085019094528054808552920154909316928201929092528891889190610cc0576040517f6831488c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602481018390526044016102a6565b73ffffffffffffffffffffffffffffffffffffffff8a1660008181526001602081815260408084208e855290915280832083815590910180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055518b929133917f9ba1a3cb55ce8d63d072a886f94d2a744f50cddf82128e897d0661f5ec6231589190a450505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff808416600090815260016020818152604080842087855282529283902083518085019094528054808552920154909316928201929092528491849190610df9576040517f6831488c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602481018390526044016102a6565b610e01610fbc565b6040517f6352211e00000000000000000000000000000000000000000000000000000000815260048101869052869086903390839060009073ffffffffffffffffffffffffffffffffffffffff831690636352211e90602401602060405180830381865afa158015610e77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9b91906110d9565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610f02576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008911610f3c576040517fe1abbfc500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8b1660008181526001602090815260408083208e84528252918290208c905590518b81528c929133917fd547e933094f12a9159076970143ebe73234e64480317844b0dcb36117116de4910160405180910390a45050505050610fb46001600055565b505050505050565b600260005403611028576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102a6565b6002600055565b73ffffffffffffffffffffffffffffffffffffffff8116811461105157600080fd5b50565b60006020828403121561106657600080fd5b81356110718161102f565b9392505050565b6000806040838503121561108b57600080fd5b82356110968161102f565b946020939093013593505050565b6000806000606084860312156110b957600080fd5b83356110c48161102f565b95602085013595506040909401359392505050565b6000602082840312156110eb57600080fd5b81516110718161102f565b808201808211156101fd577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220581569a30f57fef4e8d902166915ca9bba2c98be10b9c1e9f146aa2cbadbfd0064736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100705760003560e01c80639038e6931161004e5780639038e6931461013e5780639f37092a14610153578063b2ddee0614610166578063f772adf11461018657600080fd5b806330cfeda91461007557806388700d1c146100cb57806389bfd38f1461011c575b600080fd5b34801561008157600080fd5b506100b8610090366004611054565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205490565b6040519081526020015b60405180910390f35b3480156100d757600080fd5b506100eb6100e6366004611078565b6101a6565b604080518251815260209283015173ffffffffffffffffffffffffffffffffffffffff1692810192909252016100c2565b34801561012857600080fd5b5061013c6101373660046110a4565b610203565b005b34801561014a57600080fd5b5061013c61060f565b61013c610161366004611078565b61071b565b34801561017257600080fd5b5061013c610181366004611078565b610b19565b34801561019257600080fd5b5061013c6101a13660046110a4565b610d53565b6040805180820182526000808252602091820181905273ffffffffffffffffffffffffffffffffffffffff858116825260018084528483208684528452918490208451808601909552805485529091015416908201525b92915050565b73ffffffffffffffffffffffffffffffffffffffff808416600090815260016020818152604080842087855282529283902083518085019094528054808552920154909316928201929092528491849190156102af576040517f4a5568d500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602481018390526044015b60405180910390fd5b6040517f6352211e00000000000000000000000000000000000000000000000000000000815260048101869052869086903390839060009073ffffffffffffffffffffffffffffffffffffffff831690636352211e90602401602060405180830381865afa158015610325573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034991906110d9565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146103b0576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600089116103ea576040517fe1abbfc500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f081812fc000000000000000000000000000000000000000000000000000000008152600481018b90528b90309073ffffffffffffffffffffffffffffffffffffffff83169063081812fc90602401602060405180830381865afa158015610459573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047d91906110d9565b73ffffffffffffffffffffffffffffffffffffffff16146104ca576040517f4be3a2c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180604001604052808b81526020013373ffffffffffffffffffffffffffffffffffffffff16815250600160008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d81526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050508a8c73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd547e933094f12a9159076970143ebe73234e64480317844b0dcb36117116de48d6040516105f991815260200190565b60405180910390a4505050505050505050505050565b3360009081526002602052604090205480610656576040517fc4d8fa8700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000818152600260205260408082208290555190919083908381818185875af1925050503d80600081146106a7576040519150601f19603f3d011682016040523d82523d6000602084013e6106ac565b606091505b5050905080610717576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c6564000000000000000000000000000000000060448201526064016102a6565b5050565b73ffffffffffffffffffffffffffffffffffffffff8083166000908152600160208181526040808420868552825292839020835180850190945280548085529201549093169282019290925283918391906107c1576040517f6831488c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602481018390526044016102a6565b6040517f6352211e00000000000000000000000000000000000000000000000000000000815260048101859052859085903390839060009073ffffffffffffffffffffffffffffffffffffffff831690636352211e90602401602060405180830381865afa158015610837573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085b91906110d9565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036108c2576040517f65b023fd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108ca610fbc565b73ffffffffffffffffffffffffffffffffffffffff808b1660009081526001602081815260408084208e85528252928390208351808501909452805480855292015490931692820192909252903410156109795780516040517f7c93456500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d166004820152602481018c905260448101919091526064016102a6565b60208082015173ffffffffffffffffffffffffffffffffffffffff16600090815260029091526040812080543492906109b39084906110f6565b909155505073ffffffffffffffffffffffffffffffffffffffff8b1660008181526001602081815260408084208f855282528084209384559290910180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905583015190517f42842e0e0000000000000000000000000000000000000000000000000000000081526342842e0e91610a7f9133908f9060040173ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b600060405180830381600087803b158015610a9957600080fd5b505af1158015610aad573d6000803e3d6000fd5b505082516040519081528c925073ffffffffffffffffffffffffffffffffffffffff8e16915033907f263223b1dd81e51054a4e6f791d45a4a1ddb4aadcd93a2dfd892615c3fdac1879060200160405180910390a450610b0d6001600055565b50505050505050505050565b6040517f6352211e00000000000000000000000000000000000000000000000000000000815260048101829052829082903390839060009073ffffffffffffffffffffffffffffffffffffffff831690636352211e90602401602060405180830381865afa158015610b8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb391906110d9565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610c1a576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff80881660009081526001602081815260408084208b855282529283902083518085019094528054808552920154909316928201929092528891889190610cc0576040517f6831488c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602481018390526044016102a6565b73ffffffffffffffffffffffffffffffffffffffff8a1660008181526001602081815260408084208e855290915280832083815590910180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055518b929133917f9ba1a3cb55ce8d63d072a886f94d2a744f50cddf82128e897d0661f5ec6231589190a450505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff808416600090815260016020818152604080842087855282529283902083518085019094528054808552920154909316928201929092528491849190610df9576040517f6831488c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602481018390526044016102a6565b610e01610fbc565b6040517f6352211e00000000000000000000000000000000000000000000000000000000815260048101869052869086903390839060009073ffffffffffffffffffffffffffffffffffffffff831690636352211e90602401602060405180830381865afa158015610e77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9b91906110d9565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610f02576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008911610f3c576040517fe1abbfc500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8b1660008181526001602090815260408083208e84528252918290208c905590518b81528c929133917fd547e933094f12a9159076970143ebe73234e64480317844b0dcb36117116de4910160405180910390a45050505050610fb46001600055565b505050505050565b600260005403611028576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102a6565b6002600055565b73ffffffffffffffffffffffffffffffffffffffff8116811461105157600080fd5b50565b60006020828403121561106657600080fd5b81356110718161102f565b9392505050565b6000806040838503121561108b57600080fd5b82356110968161102f565b946020939093013593505050565b6000806000606084860312156110b957600080fd5b83356110c48161102f565b95602085013595506040909401359392505050565b6000602082840312156110eb57600080fd5b81516110718161102f565b808201808211156101fd577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220581569a30f57fef4e8d902166915ca9bba2c98be10b9c1e9f146aa2cbadbfd0064736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/NftMarketplace.sol:NftMarketplace",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2669,
        "contract": "contracts/NftMarketplace.sol:NftMarketplace",
        "label": "s_listings",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)2634_storage))"
      },
      {
        "astId": 2673,
        "contract": "contracts/NftMarketplace.sol:NftMarketplace",
        "label": "s_proceeds",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)2634_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct NftMarketplace.Listing))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Listing)2634_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Listing)2634_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NftMarketplace.Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)2634_storage"
      },
      "t_struct(Listing)2634_storage": {
        "encoding": "inplace",
        "label": "struct NftMarketplace.Listing",
        "members": [
          {
            "astId": 2631,
            "contract": "contracts/NftMarketplace.sol:NftMarketplace",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2633,
            "contract": "contracts/NftMarketplace.sol:NftMarketplace",
            "label": "seller",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}